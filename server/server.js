require("dotenv").config();
const express = require("express");
const http = require("http"); // ‚úÖ Import module HTTP
const socketIo = require("socket.io"); // ‚úÖ Import socket.io
const mysql = require("mysql2");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const cors = require("cors");
const bodyParser = require("body-parser");
const multer = require("multer");
const path = require("path");
const fs = require("fs");
const cloudinary = require("./config");
const upload = multer({
  dest: "uploads/",
  limits: { fileSize: 5 * 1024 * 1024 }, // Gi·ªõi h·∫°n 5MB
});

const app = express();
const server = http.createServer(app); // ‚úÖ T·∫°o server HTTP tr∆∞·ªõc
const io = socketIo(server, {
  // ‚úÖ G·∫Øn socket.io v√†o server
  cors: {
    origin: "*",
    methods: ["GET", "POST"],
  },
});

app.use(cors());
app.use(bodyParser.json());

// K·∫øt n·ªëi MySQL
const db = mysql.createConnection({
  host: "localhost",
  user: "root",
  password: "",
  database: "auth_system",
});

db.connect((err) => {
  if (err) {
    console.error("‚ùå L·ªói k·∫øt n·ªëi MySQL:", err);
    return;
  }
  console.log("‚úÖ ƒê√£ k·∫øt n·ªëi MySQL");
});

// üî• WebSocket: L·∫Øng nghe s·ª± ki·ªán tin nh·∫Øn m·ªõi
io.on("connection", (socket) => {
  console.log("üü¢ User connected:", socket.id);

  socket.on("sendMessage", ({ sender, receiver, message, message_type }) => {
    console.log(`üì® Tin nh·∫Øn t·ª´ ${sender} ƒë·∫øn ${receiver}: "${message}"`);

    db.query(
      "INSERT INTO messages (sender, receiver, message, message_type) VALUES (?, ?, ?, ?)",
      [sender, receiver, message, message_type],
      (err, result) => {
        if (err) {
          console.error("‚ùå L·ªói khi g·ª≠i tin nh·∫Øn:", err);
          return;
        }

        // üî• Ph√°t s·ª± ki·ªán tin nh·∫Øn m·ªõi ƒë·∫øn ng∆∞·ªùi nh·∫≠n
        io.emit(`newMessage-${receiver}`, {
          sender,
          receiver,
          message,
          message_type,
          created_at: new Date().toISOString(),
        });
      }
    );
  });

  socket.on("disconnect", () => {
    console.log("üî¥ User disconnected:", socket.id);
  });
});

// ƒêƒÉng k√Ω t√†i kho·∫£n
app.post("/register", (req, res) => {
  const { username, password, role } = req.body;

  // Ki·ªÉm tra role h·ª£p l·ªá
  const validRoles = ["doanh_nghiep", "chuyen_gia", "tu_van_vien", "operator"];
  if (!validRoles.includes(role)) {
    return res.status(400).json({ error: "Vai tr√≤ kh√¥ng h·ª£p l·ªá" });
  }

  // M√£ h√≥a m·∫≠t kh·∫©u tr∆∞·ªõc khi l∆∞u v√†o database
  bcrypt.hash(password, 10, (err, hash) => {
    if (err) return res.status(500).json({ error: "L·ªói m√£ h√≥a m·∫≠t kh·∫©u" });

    const sql =
      "INSERT INTO users (username, password, role, online) VALUES (?, ?, ?, false)";
    db.query(sql, [username, hash, role], (err, result) => {
      if (err)
        return res.status(400).json({ error: "T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i" });

      res.json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng" });
    });
  });
});

// ƒêƒÉng nh·∫≠p
app.post("/login", (req, res) => {
  const { username, password } = req.body;
  const sql = "SELECT * FROM users WHERE username = ?";

  db.query(sql, [username], (err, results) => {
    if (err || results.length === 0) {
      console.log("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n!");
      return res.status(400).json({ error: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i" });
    }

    bcrypt.compare(password, results[0].password, (err, match) => {
      if (!match) {
        console.log("‚ùå L·ªói: M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!");
        return res.status(400).json({ error: "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });
      }

      // ‚úÖ Tr·∫£ v·ªÅ userId ƒë√∫ng
      const userId = results[0].id;
      const role = results[0].role;

      // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i online
      db.query(
        "UPDATE users SET online = true WHERE id = ?",
        [userId],
        (updateErr) => {
          if (updateErr) {
            console.log("‚ùå L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i online:", updateErr);
            return res
              .status(500)
              .json({ error: "L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i online" });
          }

          const token = jwt.sign(
            { id: userId, username, role, online: true }, // ‚úÖ ƒê·∫∑t online = true trong token
            process.env.JWT_SECRET || "my_secret",
            { expiresIn: "1h" }
          );

          console.log(`‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng! User ID: ${userId}`);

          res.json({
            message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
            userId: userId,
            role: role,
            token: token,
            online: true, // ‚úÖ X√°c nh·∫≠n user ƒëang online
          });
        }
      );
    });
  });
});

app.post("/logout", (req, res) => {
  const { userId } = req.body;

  if (!userId) {
    return res.status(400).json({ error: "Thi·∫øu userId" });
  }

  // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i online th√†nh false
  db.query(
    "UPDATE users SET online = false WHERE id = ?",
    [userId],
    (err, result) => {
      if (err) {
        console.log("‚ùå L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i online:", err);
        return res
          .status(500)
          .json({ error: "L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i online" });
      }

      if (result.affectedRows === 0) {
        return res.status(400).json({ error: "UserId kh√¥ng t·ªìn t·∫°i" });
      }

      console.log(`‚úÖ User ID ${userId} ƒë√£ ƒëƒÉng xu·∫•t (online = false)`);
      res.json({ message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng", online: false });
    }
  );
});

// L·∫•y danh s√°ch ng∆∞·ªùi d√πng
app.get("/users", (req, res) => {
  const sql = "SELECT id, username, role FROM users";
  db.query(sql, (err, results) => {
    if (err)
      return res.status(500).json({ error: "L·ªói l·∫•y danh s√°ch ng∆∞·ªùi d√πng" });

    res.json(results);
  });
});

// C·∫≠p nh·∫≠t quy·ªÅn user (ch·ªâ Operator m·ªõi c√≥ quy·ªÅn thay ƒë·ªïi)
app.put("/update-role", (req, res) => {
  const { username, role } = req.body;

  const validRoles = ["doanh_nghiep", "chuyen_gia", "tu_van_vien", "operator"];
  if (!validRoles.includes(role)) {
    return res.status(400).json({ error: "Vai tr√≤ kh√¥ng h·ª£p l·ªá" });
  }

  const sql = "UPDATE users SET role = ? WHERE username = ?";
  db.query(sql, [role, username], (err, result) => {
    if (err || result.affectedRows === 0) {
      return res.status(400).json({ error: "L·ªói khi c·∫≠p nh·∫≠t quy·ªÅn" });
    }
    res.json({ message: "C·∫≠p nh·∫≠t quy·ªÅn th√†nh c√¥ng" });
  });
});

// CODE NG√ÄY 11/03/2025
app.post("/google-login", async (req, res) => {
  try {
    const { email, uid } = req.body;

    if (!email || !uid) {
      return res.status(400).json({ error: "Thi·∫øu th√¥ng tin t√†i kho·∫£n" });
    }

    const sqlCheckUser = "SELECT * FROM users WHERE username = ?";
    db.query(sqlCheckUser, [email], async (err, results) => {
      if (err) {
        console.error("‚ùå L·ªói ki·ªÉm tra t√†i kho·∫£n:", err);
        return res.status(500).json({ error: "L·ªói ki·ªÉm tra t√†i kho·∫£n" });
      }

      if (results.length > 0) {
        // üü¢ Ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i, l·∫•y th√¥ng tin t·ª´ database
        const userId = results[0].id; // ‚úÖ L·∫•y userId t·ª´ k·∫øt qu·∫£ truy v·∫•n
        const role = results[0].role; // ‚úÖ L·∫•y role t·ª´ database
        // üü¢ Ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i, l·∫•y th√¥ng tin t·ª´ database
        console.log(`‚úÖ User t·ªìn t·∫°i: ${email}, Role: ${results[0].role}`);

        db.query("UPDATE users SET online = true WHERE id = ?", [userId]);

        const token = jwt.sign(
          { id: userId, username: email, role: results[0].role },
          process.env.JWT_SECRET || "my_secret",
          { expiresIn: "1h" }
        );

        return res.json({
          message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
          userId: userId, // ‚úÖ Tr·∫£ v·ªÅ userId
          token,
          role: results[0].role,
          online: true, // ‚úÖ Tr·∫£ v·ªÅ tr·∫°ng th√°i online
        });
      } else {
        // üîπ Ng∆∞·ªùi d√πng m·ªõi, t·∫°o t√†i kho·∫£n
        console.log(`üü¢ Ng∆∞·ªùi d√πng m·ªõi, t·∫°o t√†i kho·∫£n: ${email}`);

        // M√£ h√≥a UID l√†m m·∫≠t kh·∫©u ·∫£o
        const hashedPassword = await bcrypt.hash(uid, 10);

        const sqlInsert =
          "INSERT INTO users (username, password, role, online) VALUES (?, ?, 'doanh_nghiep', false)";
        db.query(sqlInsert, [email, hashedPassword], (err, result) => {
          if (err) {
            console.error("‚ùå L·ªói t·∫°o t√†i kho·∫£n:", err);
            return res.status(500).json({ error: "L·ªói t·∫°o t√†i kho·∫£n m·ªõi" });
          }

          console.log("‚úÖ T·∫°o t√†i kho·∫£n th√†nh c√¥ng!");
          const userId = result.insertId; // ‚úÖ L·∫•y userId m·ªõi t·∫°o
          const token = jwt.sign(
            { username: email, role: "doanh_nghiep" },
            process.env.JWT_SECRET || "my_secret",
            { expiresIn: "1h" }
          );

          return res.json({
            message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
            userId: userId, // ‚úÖ Tr·∫£ v·ªÅ userId m·ªõi t·∫°o
            token,
            role: "doanh_nghiep",
            online: true, // ‚úÖ M·∫∑c ƒë·ªãnh online = true khi ƒëƒÉng k√Ω m·ªõi
          });
        });
      }
    });
  } catch (error) {
    console.error("‚ùå L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω:", error);
    res.status(500).json({ error: "L·ªói server" });
  }
});

//G·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n
app.post("/friends/request", (req, res) => {
  const { fromUser, toUser } = req.body;
  console.log("üîπ Nh·∫≠n y√™u c·∫ßu k·∫øt b·∫°n:", req.body); // Debug

  if (!fromUser || !toUser) {
    console.log("‚ùå Thi·∫øu d·ªØ li·ªáu g·ª≠i l√™n!");
    return res.status(400).json({ error: "Thi·∫øu th√¥ng tin ng∆∞·ªùi d√πng" });
  }

  // Ki·ªÉm tra n·∫øu l·ªùi m·ªùi ƒë√£ t·ªìn t·∫°i
  db.query(
    'SELECT * FROM friends WHERE user_id = ? AND friend_id = ? AND status = "pending"',
    [fromUser, toUser],
    (err, results) => {
      if (err) {
        console.log("‚ùå L·ªói DB:", err);
        return res.status(500).json({ error: "L·ªói database" });
      }

      if (results.length > 0) {
        console.log("‚ùå L·ªùi m·ªùi ƒë√£ t·ªìn t·∫°i!");
        return res.status(400).json({ error: "L·ªùi m·ªùi k·∫øt b·∫°n ƒë√£ t·ªìn t·∫°i" });
      }

      // Th√™m l·ªùi m·ªùi k·∫øt b·∫°n
      db.query(
        'INSERT INTO friends (user_id, friend_id, status) VALUES (?, ?, "pending")',
        [fromUser, toUser],
        (err) => {
          if (err) {
            console.log("‚ùå L·ªói khi ch√®n v√†o database:", err);
            return res
              .status(500)
              .json({ error: "L·ªói khi g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n" });
          }
          console.log("‚úÖ ƒê√£ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n!");
          res.send({ message: "L·ªùi m·ªùi k·∫øt b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i" });
        }
      );
    }
  );
});

//Ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n
app.post("/friends/accept", (req, res) => {
  const { fromUser, toUser } = req.body;

  if (!fromUser || !toUser) {
    return res.status(400).json({ error: "Thi·∫øu th√¥ng tin ng∆∞·ªùi d√πng" });
  }

  db.query(
    'UPDATE friends SET status = "accepted" WHERE user_id = ? AND friend_id = ? AND status = "pending"',
    [fromUser, toUser],
    (err, result) => {
      if (err) return res.status(500).send(err);
      if (result.affectedRows === 0) {
        return res
          .status(400)
          .json({ error: "L·ªùi m·ªùi k·∫øt b·∫°n kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ x·ª≠ l√Ω" });
      }
      res.send({ message: "ƒê√£ ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n" });
    }
  );
});
//H·ªßy l·ªùi m·ªùi k·∫øt b·∫°n
app.post("/friends/reject", (req, res) => {
  const { fromUser, toUser } = req.body;

  if (!fromUser || !toUser) {
    return res.status(400).json({ error: "Thi·∫øu th√¥ng tin ng∆∞·ªùi d√πng" });
  }

  db.query(
    'DELETE FROM friends WHERE user_id = ? AND friend_id = ? AND status = "pending"',
    [fromUser, toUser],
    (err, result) => {
      if (err) return res.status(500).send(err);
      if (result.affectedRows === 0) {
        return res
          .status(400)
          .json({ error: "Kh√¥ng t√¨m th·∫•y l·ªùi m·ªùi k·∫øt b·∫°n" });
      }
      res.send({ message: "ƒê√£ h·ªßy l·ªùi m·ªùi k·∫øt b·∫°n" });
    }
  );
});
//L·∫•y danh s√°ch l·ªùi m·ªùi k·∫øt b·∫°n
app.get("/friends/pending/:userId", (req, res) => {
  const { userId } = req.params;

  db.query(
    'SELECT users.id, users.username FROM friends JOIN users ON friends.user_id = users.id WHERE friends.friend_id = ? AND friends.status = "pending"',
    [userId],
    (err, results) => {
      if (err) return res.status(500).json({ error: "L·ªói database" });

      res.json(results);
    }
  );
});

//L·∫•y danh s√°ch b·∫°n b√® tr·ª´ user ƒëƒÉng nh·∫≠p
app.get("/friends/list/:userId", (req, res) => {
  const { userId } = req.params;

  db.query(
    `SELECT users.id, users.username, users.online FROM friends 
         JOIN users ON (friends.user_id = users.id OR friends.friend_id = users.id)
         WHERE (friends.user_id = ? OR friends.friend_id = ?) 
         AND friends.status = "accepted" AND users.id != ?`,
    [userId, userId, userId],
    (err, results) => {
      if (err) return res.status(500).json({ error: "L·ªói database" });
      res.json(results);
    }
  );
});

//L·∫•y danh s√°ch user tr·ª´ user ƒëang nh·∫≠p
app.get("/users/all/:userId", (req, res) => {
  const { userId } = req.params;

  const sql = `
        SELECT users.id, users.username 
        FROM users
        WHERE users.id != ? 
        AND users.id NOT IN (
            SELECT friend_id FROM friends WHERE user_id = ? AND status = 'accepted'
            UNION
            SELECT user_id FROM friends WHERE friend_id = ? AND status = 'accepted'
        )
    `;

  db.query(sql, [userId, userId, userId], (err, results) => {
    if (err) return res.status(500).json({ error: "L·ªói database" });
    res.json(results);
  });
});

//Api g·ª≠i tin nh·∫Øn gi·ªØa 2 ng∆∞·ªùi
app.post("/chat/send", (req, res) => {
  const { sender, receiver, message, message_type } = req.body;

  if (!sender || !receiver || !message || !message_type) {
    return res.status(400).json({ error: "Thi·∫øu th√¥ng tin tin nh·∫Øn" });
  }

  db.query(
    "INSERT INTO messages (sender, receiver, message, message_type) VALUES (?, ?, ?, ?)",
    [sender, receiver, message, message_type],
    (err, result) => {
      if (err) {
        console.error("‚ùå L·ªói khi g·ª≠i tin nh·∫Øn:", err);
        return res.status(500).json({ error: "L·ªói khi g·ª≠i tin nh·∫Øn" });
      }
      console.log(`‚úÖ Tin nh·∫Øn t·ª´ ${sender} ƒë·∫øn ${receiver}: "${message}"`);
      res.json({ message: "Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i", messageId: result.insertId });
    }
  );
});

//API l·∫•y l·ªãch s·ª≠ tin nh·∫Øn gi·ªØa 2 ng∆∞·ªùi
app.get("/chat/history", (req, res) => {
  const { sender, receiver } = req.query;

  if (!sender || !receiver) {
    return res.status(400).json({ error: "Thi·∫øu th√¥ng tin ng∆∞·ªùi d√πng" });
  }

  db.query(
    `SELECT sender, receiver, message, message_type, seen, created_at 
         FROM messages 
         WHERE (sender = ? AND receiver = ?) OR (sender = ? AND receiver = ?)
         ORDER BY created_at ASC`,
    [sender, receiver, receiver, sender],
    (err, results) => {
      if (err) {
        console.error("‚ùå L·ªói khi l·∫•y l·ªãch s·ª≠ chat:", err);
        return res.status(500).json({ error: "L·ªói khi l·∫•y l·ªãch s·ª≠ chat" });
      }
      res.json(results);
    }
  );
});

//API ƒë√°nh d·∫•u tin nh·∫Øn ƒë√£ xem
app.post("/chat/seen", (req, res) => {
  const { userId, chatPartnerId } = req.body;

  if (!userId || !chatPartnerId) {
    return res.status(400).json({ error: "Thi·∫øu th√¥ng tin ng∆∞·ªùi d√πng" });
  }

  db.query(
    "UPDATE messages SET seen = TRUE WHERE receiver = ? AND sender = ?",
    [userId, chatPartnerId],
    (err, result) => {
      if (err) {
        console.error("‚ùå L·ªói khi ƒë√°nh d·∫•u tin nh·∫Øn ƒë√£ xem:", err);
        return res
          .status(500)
          .json({ error: "L·ªói khi ƒë√°nh d·∫•u tin nh·∫Øn ƒë√£ xem" });
      }
      res.json({ message: "Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† ƒë√£ xem" });
    }
  );
});

//API x√≥a m·ªôt tin nh·∫Øn
app.post("/chat/delete", (req, res) => {
  const { messageId, userId } = req.body;

  if (!messageId || !userId) {
    return res
      .status(400)
      .json({ error: "Thi·∫øu th√¥ng tin tin nh·∫Øn ho·∫∑c ng∆∞·ªùi d√πng" });
  }

  db.query(
    "DELETE FROM messages WHERE id = ? AND sender = ?",
    [messageId, userId],
    (err, result) => {
      if (err) {
        console.error("‚ùå L·ªói khi x√≥a tin nh·∫Øn:", err);
        return res.status(500).json({ error: "L·ªói khi x√≥a tin nh·∫Øn" });
      }
      if (result.affectedRows === 0) {
        return res
          .status(403)
          .json({ error: "B·∫°n kh√¥ng th·ªÉ x√≥a tin nh·∫Øn c·ªßa ng∆∞·ªùi kh√°c" });
      }
      res.json({ message: "Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c x√≥a" });
    }
  );
});

//API ch·ªânh s·ª≠a tin nh·∫Øn
app.post("/chat/edit", (req, res) => {
  const { messageId, userId, newMessage } = req.body;

  if (!messageId || !userId || !newMessage) {
    return res
      .status(400)
      .json({ error: "Thi·∫øu th√¥ng tin ch·ªânh s·ª≠a tin nh·∫Øn" });
  }

  db.query(
    "UPDATE messages SET message = ? WHERE id = ? AND sender = ?",
    [newMessage, messageId, userId],
    (err, result) => {
      if (err) {
        console.error("‚ùå L·ªói khi ch·ªânh s·ª≠a tin nh·∫Øn:", err);
        return res.status(500).json({ error: "L·ªói khi ch·ªânh s·ª≠a tin nh·∫Øn" });
      }
      if (result.affectedRows === 0) {
        return res
          .status(403)
          .json({ error: "B·∫°n kh√¥ng th·ªÉ ch·ªânh s·ª≠a tin nh·∫Øn c·ªßa ng∆∞·ªùi kh√°c" });
      }
      res.json({ message: "Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c ch·ªânh s·ª≠a" });
    }
  );
});

//Chat nh√≥m
// API t·∫°o nh√≥m chat
app.post("/groups/create", (req, res) => {
  const { name, adminId } = req.body;

  if (!name || !adminId) {
    return res.status(400).json({ error: "Thi·∫øu th√¥ng tin nh√≥m ho·∫∑c admin" });
  }

  // üîç Ki·ªÉm tra nh√≥m c√≥ t·ªìn t·∫°i ch∆∞a
  db.query("SELECT id FROM groups WHERE name = ?", [name], (err, results) => {
    if (err) {
      console.error("‚ùå L·ªói khi ki·ªÉm tra nh√≥m:", err);
      return res.status(500).json({ error: "L·ªói ki·ªÉm tra nh√≥m" });
    }

    if (results.length > 0) {
      return res
        .status(400)
        .json({ error: "T√™n nh√≥m ƒë√£ t·ªìn t·∫°i, vui l√≤ng ch·ªçn t√™n kh√°c" });
    }

    // üü¢ N·∫øu ch∆∞a t·ªìn t·∫°i, ti·∫øn h√†nh t·∫°o nh√≥m
    db.query("INSERT INTO groups (name) VALUES (?)", [name], (err, result) => {
      if (err) {
        console.error("‚ùå L·ªói khi t·∫°o nh√≥m:", err);
        return res.status(500).json({ error: "L·ªói t·∫°o nh√≥m" });
      }

      const groupId = result.insertId;
      console.log(`‚úÖ Nh√≥m t·∫°o th√†nh c√¥ng v·ªõi ID: ${groupId}`);

      // üîπ Th√™m admin v√†o nh√≥m
      db.query(
        "INSERT INTO group_members (group_id, user_id) VALUES (?, ?)",
        [groupId, adminId],
        (err) => {
          if (err) {
            console.error("‚ùå L·ªói khi th√™m admin v√†o nh√≥m:", err);
            return res
              .status(500)
              .json({ error: "L·ªói khi th√™m admin v√†o nh√≥m" });
          }

          res.json({ message: "Nh√≥m ƒë√£ ƒë∆∞·ª£c t·∫°o", groupId: groupId });
        }
      );
    });
  });
});

//API g·ª≠i l·ªùi m·ªùi v√†o nh√≥m
app.post("/group/create", (req, res) => {
  const { name, members, creatorId } = req.body;

  if (!name || !creatorId || !Array.isArray(members) || members.length === 0) {
    return res
      .status(400)
      .json({ error: "Thi·∫øu th√¥ng tin nh√≥m ho·∫∑c th√†nh vi√™n" });
  }

  // Ki·ªÉm tra xem nh√≥m ƒë√£ t·ªìn t·∫°i ch∆∞a
  db.query("SELECT id FROM groups WHERE name = ?", [name], (err, results) => {
    if (err) {
      console.error("‚ùå L·ªói khi ki·ªÉm tra nh√≥m:", err);
      return res.status(500).json({ error: "L·ªói ki·ªÉm tra nh√≥m" });
    }

    if (results.length > 0) {
      return res
        .status(400)
        .json({ error: "T√™n nh√≥m ƒë√£ t·ªìn t·∫°i, vui l√≤ng ch·ªçn t√™n kh√°c" });
    }

    // üü¢ N·∫øu ch∆∞a t·ªìn t·∫°i, ti·∫øn h√†nh t·∫°o nh√≥m
    db.query("INSERT INTO groups (name) VALUES (?)", [name], (err, result) => {
      if (err) {
        console.error("‚ùå L·ªói khi t·∫°o nh√≥m:", err);
        return res.status(500).json({ error: "L·ªói t·∫°o nh√≥m" });
      }

      const groupId = result.insertId;
      console.log(`‚úÖ Nh√≥m t·∫°o th√†nh c√¥ng v·ªõi ID: ${groupId}`);

      // üîπ Th√™m t·∫•t c·∫£ th√†nh vi√™n v√†o nh√≥m (bao g·ªìm c·∫£ creator)
      const memberQueries = [...members, creatorId].map((userId) => {
        return new Promise((resolve, reject) => {
          db.query(
            "INSERT INTO group_members (group_id, user_id) VALUES (?, ?)",
            [groupId, userId],
            (err, result) => {
              if (err) {
                console.error(`‚ùå L·ªói khi th√™m user ${userId} v√†o nh√≥m:`, err);
                reject(err);
              } else {
                resolve(result);
              }
            }
          );
        });
      });

      // ‚úÖ ƒê·ª£i t·∫•t c·∫£ th√†nh vi√™n ƒë∆∞·ª£c th√™m v√†o nh√≥m
      Promise.all(memberQueries)
        .then(() => {
          res.json({
            message: "Nh√≥m ƒë√£ ƒë∆∞·ª£c t·∫°o v√† th√™m th√†nh vi√™n th√†nh c√¥ng",
            groupId,
          });
        })
        .catch((err) => {
          res.status(500).json({ error: "L·ªói khi th√™m th√†nh vi√™n v√†o nh√≥m" });
        });
    });
  });
});

// API: L·∫•y danh s√°ch nh√≥m c·ªßa user
app.get("/groups/list/:userId", (req, res) => {
  const { userId } = req.params;

  db.query(
    `SELECT g.id, g.name 
        FROM groups g 
        JOIN group_members gm ON g.id = gm.group_id 
        WHERE gm.user_id = ?`,
    [userId],
    (err, results) => {
      if (err) {
        console.error("‚ùå L·ªói khi l·∫•y danh s√°ch nh√≥m:", err);
        return res.status(500).json({ error: "L·ªói server" });
      }
      res.json(results);
    }
  );
});

//API: G·ª≠i tin nh·∫Øn trong nh√≥m
app.post("/group/send-message", (req, res) => {
  const { groupId, sender, message } = req.body;

  if (!groupId || !sender || !message) {
    return res.status(400).json({ error: "Thi·∫øu th√¥ng tin" });
  }

  db.query(
    "INSERT INTO group_messages (group_id, sender, message) VALUES (?, ?, ?)",
    [groupId, sender, message],
    (err, result) => {
      if (err) {
        console.error("‚ùå L·ªói khi g·ª≠i tin nh·∫Øn nh√≥m:", err);
        return res.status(500).json({ error: "L·ªói khi g·ª≠i tin nh·∫Øn nh√≥m" });
      }
      res.json({ message: "Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i", messageId: result.insertId });
    }
  );
});

//API l·∫•y danh s√°ch th√†nh vi√™n trong nh√≥m
app.get("/group/members/:groupId", (req, res) => {
  const { groupId } = req.params;

  db.query(
    `SELECT users.id, users.username 
       FROM group_members 
       JOIN users ON group_members.user_id = users.id
       WHERE group_members.group_id = ? AND group_members.status = 'accepted'`,
    [groupId],
    (err, results) => {
      if (err) {
        console.error("‚ùå L·ªói khi l·∫•y danh s√°ch th√†nh vi√™n:", err);
        return res.status(500).json({ error: "L·ªói server" });
      }

      res.json(results);
    }
  );
});

//API l·∫•y l·ªãch s·ª≠ tin nh·∫Øn nh√≥m
app.get("/group/messages/:groupId", (req, res) => {
  const { groupId } = req.params;

  db.query(
    `SELECT group_messages.*, users.username 
           FROM group_messages 
           JOIN users ON group_messages.sender = users.id
           WHERE group_id = ? 
           ORDER BY created_at ASC`,
    [groupId],
    (err, results) => {
      if (err) {
        console.error("‚ùå L·ªói khi l·∫•y tin nh·∫Øn nh√≥m:", err);
        return res.status(500).json({ error: "L·ªói khi l·∫•y tin nh·∫Øn nh√≥m" });
      }
      res.json(results);
    }
  );
});

///API g·ª≠i nh·∫≠n file, video, ·∫£nh trong  chat private
// ‚úÖ API upload image
app.post("/upload/image", upload.single("file"), async (req, res) => {
  const filePath = req.file.path;
  const { sender, receiver } = req.body;

  if (!sender || !receiver) {
    return res.status(400).json({ error: "Thi·∫øu th√¥ng tin sender/receiver" });
  }

  try {
    const result = await cloudinary.uploader.upload(filePath, {
      resource_type: "auto", // ph√¢n bi·ªát video / image
    });

    const messageType = result.resource_type === "video" ? "video" : "image";
    const cloudUrl = result.secure_url;

    // ‚úÖ L∆∞u v√†o b·∫£ng messages
    db.query(
      "INSERT INTO messages (sender, receiver, message, message_type) VALUES (?, ?, ?, ?)",
      [sender, receiver, cloudUrl, messageType],
      (err, resultDb) => {
        fs.unlinkSync(filePath); // x√≥a file t·∫°m
        if (err) {
          console.error("‚ùå L·ªói l∆∞u DB:", err);
          return res.status(500).json({ error: "L·ªói l∆∞u tin nh·∫Øn" });
        }

        return res.json({
          message: "Upload th√†nh c√¥ng",
          url: cloudUrl,
          message_type: messageType,
          messageId: resultDb.insertId,
        });
      }
    );
  } catch (error) {
    console.error("‚ùå Upload l·ªói:", error);
    fs.unlinkSync(filePath);
    res.status(500).json({ error: "Upload th·∫•t b·∫°i", detail: error });
  }
});

// ‚úÖ API upload file
// ‚úÖ API upload file
app.post("/upload/file", upload.single("file"), async (req, res) => {
  const filePath = req.file.path;
  const { sender, receiver, original_file_name, file_extension } = req.body;

  if (!sender || !receiver) {
    return res.status(400).json({ error: "Thi·∫øu th√¥ng tin sender/receiver" });
  }

  try {
    // T·∫°o t√™n file c√≥ ƒëu√¥i ƒë·ªÉ upload l√™n Cloudinary
    const fileNameWithExt = original_file_name || path.basename(filePath);

    // Upload l√™n Cloudinary v·ªõi public_id c√≥ bao g·ªìm ƒëu√¥i file
    const result = await cloudinary.uploader.upload(filePath, {
      resource_type: "raw",
      public_id:
        fileNameWithExt.replace(/\.[^/.]+$/, "") + (file_extension || ""), // th√™m ƒëu√¥i file v√†o public_id
    });

    const cloudUrl = result.secure_url;

    // ‚úÖ L∆∞u v√†o b·∫£ng messages (ch·ªâ l∆∞u th√¥ng tin c∆° b·∫£n)
    db.query(
      "INSERT INTO messages (sender, receiver, message, message_type) VALUES (?, ?, ?, 'file')",
      [sender, receiver, cloudUrl],
      (err, resultDb) => {
        fs.unlinkSync(filePath); // x√≥a file t·∫°m
        if (err) {
          console.error("‚ùå L·ªói l∆∞u DB:", err);
          return res.status(500).json({ error: "L·ªói l∆∞u tin nh·∫Øn" });
        }

        // Tr·∫£ v·ªÅ c·∫£ th√¥ng tin file trong response ƒë·ªÉ client c√≥ th·ªÉ l∆∞u v√†o state
        return res.json({
          message: "Upload file th√†nh c√¥ng",
          url: cloudUrl,
          message_type: "file",
          messageId: resultDb.insertId,
          file_name: original_file_name,
          file_extension: file_extension,
        });
      }
    );
  } catch (error) {
    console.error("‚ùå Upload l·ªói:", error);
    fs.unlinkSync(filePath);
    res.status(500).json({ error: "Upload th·∫•t b·∫°i", detail: error });
  }
});

// Kh·ªüi ƒë·ªông server
const PORT = 3000;
app.listen(PORT, () =>
  console.log(`üöÄ Server running on http://localhost:${PORT}`)
);
