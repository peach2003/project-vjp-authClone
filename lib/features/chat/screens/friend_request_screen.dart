import 'package:flutter/material.dart';
import 'package:dio/dio.dart';
import 'package:shared_preferences/shared_preferences.dart';

class FriendRequestScreen extends StatefulWidget {
  final int currentUserId;
  const FriendRequestScreen({Key? key, required this.currentUserId}) : super(key: key);

  @override
  _FriendRequestScreenState createState() => _FriendRequestScreenState();
}

class _FriendRequestScreenState extends State<FriendRequestScreen> {
  List<Map<String, dynamic>> friendRequests = [];
  bool isLoading = true;

  @override
  void initState() {
    super.initState();
    fetchFriendRequests();
  }

  // üîπ L·∫•y danh s√°ch l·ªùi m·ªùi k·∫øt b·∫°n t·ª´ server
  Future<void> fetchFriendRequests() async {
    try {
      final response = await Dio().get("http://10.0.2.2:3000/friends/pending/${widget.currentUserId}");
      setState(() {
        friendRequests = List<Map<String, dynamic>>.from(response.data);
        isLoading = false;
      });
    } catch (e) {
      print("‚ùå L·ªói khi l·∫•y danh s√°ch l·ªùi m·ªùi k·∫øt b·∫°n: $e");
      setState(() => isLoading = false);
    }
  }

  // üîπ X·ª≠ l√Ω ch·∫•p nh·∫≠n l·ªùi m·ªùi
  Future<void> acceptRequest(int friendId) async {
    try {
      await Dio().post("http://10.0.2.2:3000/friends/accept", data: {
        "fromUser": friendId,
        "toUser": widget.currentUserId,
      });

      setState(() {
        friendRequests.removeWhere((user) => user['id'] == friendId);
      });

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("ƒê√£ ch·∫•p nh·∫≠n k·∫øt b·∫°n!")),
      );
    } catch (e) {
      print("‚ùå L·ªói khi ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n: $e");
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("L·ªói khi ch·∫•p nh·∫≠n k·∫øt b·∫°n")),
      );
    }
  }

  // üîπ X·ª≠ l√Ω t·ª´ ch·ªëi l·ªùi m·ªùi
  Future<void> rejectRequest(int friendId) async {
    try {
      await Dio().post("http://10.0.2.2:3000/friends/reject", data: {
        "fromUser": friendId,
        "toUser": widget.currentUserId,
      });

      setState(() {
        friendRequests.removeWhere((user) => user['id'] == friendId);
      });

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("ƒê√£ t·ª´ ch·ªëi k·∫øt b·∫°n!")),
      );
    } catch (e) {
      print("‚ùå L·ªói khi t·ª´ ch·ªëi l·ªùi m·ªùi k·∫øt b·∫°n: $e");
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("L·ªói khi t·ª´ ch·ªëi k·∫øt b·∫°n")),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("L·ªùi m·ªùi k·∫øt b·∫°n")),
      body: isLoading
          ? Center(child: CircularProgressIndicator())
          : friendRequests.isEmpty
          ? Center(child: Text("Kh√¥ng c√≥ l·ªùi m·ªùi k·∫øt b·∫°n"))
          : ListView.builder(
        itemCount: friendRequests.length,
        itemBuilder: (context, index) {
          final user = friendRequests[index];
          return ListTile(
            title: Text(user['username']),
            trailing: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                ElevatedButton(
                  onPressed: () => acceptRequest(user['id']),
                  child: Text("Ch·∫•p nh·∫≠n"),
                ),
                SizedBox(width: 8),
                ElevatedButton(
                  onPressed: () => rejectRequest(user['id']),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.red,
                  ),
                  child: Text("T·ª´ ch·ªëi"),
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}
